"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function padString(input) {
    var segmentLength = 4;
    var stringLength = input.length;
    var diff = stringLength % segmentLength;
    if (!diff) {
        return input;
    }
    var position = stringLength;
    var padLength = segmentLength - diff;
    var paddedStringLength = stringLength + padLength;
    var buffer = Buffer.alloc(paddedStringLength);
    buffer.write(input);
    while (padLength--) {
        buffer.write('=', position++);
    }
    return buffer.toString();
}
function encode(input, encoding) {
    if (encoding === void 0) { encoding = 'utf8'; }
    if (Buffer.isBuffer(input)) {
        return fromBase64(input.toString('base64'));
    }
    return fromBase64(Buffer.from(input, encoding).toString('base64'));
}
function decode(base64url, encoding) {
    if (encoding === void 0) { encoding = 'utf8'; }
    return Buffer.from(toBase64(base64url), 'base64').toString(encoding);
}
function toBase64(base64url) {
    base64url = base64url.toString();
    return padString(base64url)
        .replace(/\-/g, '+')
        .replace(/_/g, '/');
}
function fromBase64(base64) {
    return base64
        .replace(/=/g, '')
        .replace(/\+/g, '-')
        .replace(/\//g, '_');
}
function toBuffer(base64url) {
    return Buffer.from(toBase64(base64url), 'base64');
}
var b64u = encode;
b64u.encode = encode;
b64u.decode = decode;
b64u.toBase64 = toBase64;
b64u.fromBase64 = fromBase64;
b64u.toBuffer = toBuffer;
exports.default = b64u;
